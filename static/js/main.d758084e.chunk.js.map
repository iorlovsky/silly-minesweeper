{"version":3,"sources":["app/components/Cell.jsx","app/helpers.js","app/components/Minefield.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_useState","useState","_useState2","Object","slicedToArray","isOpened","setIsOpened","_useState3","_useState4","isChecked","setIsChecked","_useState5","_useState6","minesCount","setMinesCount","mine","gameOver","onClick","onRightClick","react_default","a","createElement","className","onContextMenu","e","preventDefault","randomInt","min","max","rand","Math","random","round","Minefield","initialMines","Array","fill","coords","mines","setMines","flags","setFlags","setGameOver","cells","findMineByCoords","find","handleFlag","newFlags","concat","toConsumableArray","length","every","flag","checkFlagsEqualMines","win","getSmileClass","useEffect","generatedMines","forEach","COUNT_ROWS","COUNT_COLS","push","generateMines","react","map","row","rowIndex","el","colIndex","components_Cell","key","_coords","col","flagToDeleteIndex","findIndex","splice","count","i","j","handleMine","App","components_Minefield","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d758084e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Cell = props => {\n  const [isOpened, setIsOpened] = useState(false);\n  const [isChecked, setIsChecked] = useState(false);\n  const [minesCount, setMinesCount] = useState(0);\n  const {mine, gameOver, onClick, onRightClick} = props;\n\n  const handleClick = () => {\n    if (gameOver) {\n      return;\n    }\n    setIsOpened(true);\n    setMinesCount(onClick());\n  };\n\n  const handleRightClick = e => {\n    e.preventDefault();\n    if (gameOver || isOpened || isChecked) {\n      return;\n    }\n    onRightClick();\n    setIsChecked(true);\n  };\n\n  return (\n    <div className={'cell' + (isOpened && !minesCount ? ' empty-cell' : '')}\n         onClick={handleClick}\n         onContextMenu={handleRightClick}\n    >\n      {gameOver && mine &&\n      <div className=\"mine-cell\"/>\n      }\n      {!gameOver && isOpened && minesCount > 0 &&\n        <div className=\"count-cell\">{minesCount}</div>\n      }\n      {!isOpened && isChecked &&\n        <div className=\"flag-cell\"/>\n      }\n    </div>\n  )\n};\n\nexport default Cell;","export const randomInt = (min, max) => {\n  let rand = min - 0.5 + Math.random() * (max - min + 1);\n  rand = Math.round(rand);\n  return rand;\n};","import React, { useEffect, useState, Fragment } from 'react';\nimport Cell from \"./Cell\";\nimport { randomInt } from \"../helpers\";\n\nconst COUNT_ROWS = 9;\nconst COUNT_COLS = 9;\nconst COUNT_MINES = 10;\n\nconst Minefield = () => {\n  const mine = {\n    coords: [null, null]\n  };\n  const initialMines = new Array(COUNT_MINES).fill(mine);\n  const [mines, setMines] = useState(initialMines);\n  const [flags, setFlags] = useState([]);\n  const [gameOver, setGameOver] = useState();\n\n  const cells = new Array(COUNT_ROWS)\n    .fill( new Array(COUNT_COLS)\n      .fill({mine: false})\n  );\n\n  const findMineByCoords = (mines, coords) => {\n    return mines.find(mine => mine.coords[0] === coords[0] && mine.coords[1] === coords[1])\n  };\n\n  const checkFlagsEqualMines = flags => {\n    if (flags.length !== mines.length) return false;\n    return flags.every(flag => mines.find(mine => mine.coords[0] === flag.coords[0] && mine.coords[1] === flag.coords[1]))\n  };\n\n  const generateMines = () => {\n    const generatedMines = [];\n    mines.forEach(() => {\n      let coords = [randomInt(0, COUNT_ROWS - 1), randomInt(0, COUNT_COLS - 1)];\n      while (!!findMineByCoords(generatedMines, coords)) {\n        coords = [randomInt(0, COUNT_ROWS - 1), randomInt(0, COUNT_COLS - 1)];\n      }\n      generatedMines.push({coords})\n    });\n    return generatedMines;\n  };\n\n  const handleMine = coords => {\n    const [row, col] = coords;\n    let flagToDeleteIndex = flags.findIndex(flag => flag.coords[0] === row && flag.coords[1] === col);\n    if (flagToDeleteIndex > -1) {\n      let newFlags = [...flags];\n      newFlags.splice(flagToDeleteIndex, 1);\n      setFlags(newFlags);\n    }\n\n    let count = 0;\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i === row && j === col && !!findMineByCoords(mines,[i, j])) {\n          setGameOver({win: false});\n          return;\n        }\n        if (!!findMineByCoords(mines,[i, j])) count++;\n      }\n    }\n    return count;\n  };\n\n  const handleFlag = coords => {\n    const newFlags = [...flags, {coords}];\n    setFlags(newFlags);\n    if (checkFlagsEqualMines(newFlags)) setGameOver({win: true});\n  };\n\n  const renderCells = () => (\n    cells.map((row, rowIndex) => row.map((el, colIndex) => {\n      return <Cell key={`${rowIndex}${colIndex}`}\n                   mine={!!findMineByCoords(mines,[rowIndex, colIndex])}\n                   onClick={() => handleMine([rowIndex, colIndex])}\n                   onRightClick={() => handleFlag([rowIndex, colIndex])}\n                   gameOver={gameOver}\n      />\n    }))\n  );\n\n  const getSmileClass = () => {\n    if (gameOver && gameOver.win) {\n      return 'smile-win';\n    } else if (gameOver && !gameOver.win){\n      return 'smile-lose';\n    } else {\n      return ''\n    }\n  };\n\n  useEffect(() => {\n    setMines(generateMines());\n  }, []);\n\n  return (\n    <Fragment>\n      <div className={'glasses glasses-' + getSmileClass()}/>\n      <div className={'blunt blunt-' + getSmileClass()}/>\n      <div className={'smile ' + getSmileClass()}/>\n      <section className='minefield'>\n        {renderCells()}\n      </section>\n    </Fragment>\n  );\n};\n\nexport default Minefield;","import React, { Component } from 'react';\nimport './App.css';\nimport Minefield from \"./app/components/Minefield\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Minefield/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}